Project 0 Presentation 

• What programming paradigm(s) did you use? Can you provide examples?
I did my best to utilize OOD on the UI as much as possible. The classes that provide the menu functionality are examples of this. I have a parent Menu class which is inherited by the MainMenu, CustomerMenu, and EmployeeMenu classes. The Menu class is abstract with one abstract method getSelection(). It also has some utility methods one of which is overridden in two of the subclasses.
The getSelection() method does all the work of 

• What design patterns did you use?
Overall the program uses a three-tiered design: presentation, service, and Data Access Object layers. 
The PostgreSQLConnection class is a singleton and manages the database connection. 
The Stdin class is also a singleton and manages the Scanner class as well as providing wrapper methods to return the necessary data types: String, int, and double. The Stdin class also has three overloaded getInt() methods (getInt(), getInt(max), and getInt(min, max)) which ensures that the return value is within a specified range.

• Did you follow the DRY principle? Or are there duplicate parts of the codebase you could refactor?
I did my best to avoid code duplication. I think any duplication that exists is minimal.

• Did you follow the single-responsibility principle?
As far as I'm aware, all the methods and such only perform a single function.

• Is your code generally readable and maintainable?
I believe so. It could probably use some more commenting, though. 

• Are there any formatting issues – commented out code, unfollowed naming conventions, unnecessary blank space, excessive nesting, etc?
There's only a handful of lines that are commented out. I believe I generally followed naming conventions. There's no unnecessary blank space that I'm aware of. And there's very little nesting.

• Did you handle exceptions and errors gracefully?
As much as possible.

• Did you hard-code values or did you externalize and make them configurable?
I created a requirement that accounts must have a $500 minimum starting balance to be created. That amount is hard-coded in the service layer. Other than that, I did my best to use constants or variables to hold values that can be customizable. For example, MENU_ITEM_SEPARATOR, INVALID_MENU_CHOICE, menuPrompt in the Menu class. 

• Did you make any part of the code too complex when it could have been written more simply?
I believe I simplified things as much as possible. I did my best to separate the various concerns into their respective layers. 
