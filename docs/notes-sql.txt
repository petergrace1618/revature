SQL/Postgre
==========


Problem: database not found
Cause: there was no public schema
Solution: 
created public schema and ran these two scripts:
grant usage on schema public to public;
grant create on schema public to public;

an untested solution: 
add to hibernate.cfg.xml
<property name="hibernate.default_schema" >hibernate_schema</property>

========

Cursor
Oracle creates a memory area, known as the context area, for processing an SQL statement, which contains all the information needed for processing the statement; for example, the number of rows processed, etc.
A cursor is a pointer to this context area. PL/SQL controls the context area through a cursor. A cursor holds the rows (one or more) returned by a SQL statement. The set of rows the cursor holds is referred to as the active set.
https://www.tutorialspoint.com/plsql/plsql_cursors.htm
==========
EXISTS operator
The EXISTS operator returns true if the subquery contains any rows. Otherwise, it returns false.
The EXISTS operator terminates the query processing immediately once it finds a row, therefore, you can leverage this feature of the EXISTS operator to improve the query performance.
https://www.sqltutorial.org/sql-exists/
---
1)What is SQL? Why we need SQL?
Structured Query Language. SQL is used to communicate with a database. According to ANSI (American National Standards Institute), it is the standard language for relational database management systems.

2)What is RDBMS?
A software system used to maintain relational databases is a relational database management system. 
A relational database is a digital database based on the relational model of data, as proposed by E. F. Codd in 1970. 
the relational model (RM) for database management is an approach to managing data using a structure and language consistent with first-order predicate logic, first described in 1969 by English computer scientist Edgar F. Codd, where all data is represented in terms of tuples, grouped into relations. A database organized in terms of the relational model is a relational database.

3)What is Normalization? Look into Normal Forms 1NF, 2NF and 3NF
https://www.guru99.com/database-normalization.html
Normalization is a way of designing a database to reduce data redundancy and other sub-optimum conditions as a result of insert, delete and update anomalies. Normalization rules divide large tables into smaller ones and establish relationships between the tables so that the integrity of the relationships are preserved.

1NF 
	Each cell only has a single value
	Each row is unique
2NF
	1NF
	Single column primary key (no composite keys)
3NF
	2NF
	No transitive functional dependencies
BCNF
	Only one candidate key


3A) A functional dependency occurs when one attribute determines another attribute in a DBMS. They are symbolized w/ the notation X -> Y. X is the determinant, Y the dependent. X determines Y, and Y is dependent on X. 
Four kinds of functional dependencies:
Multi-valued
	One attribute determines more than one other attribute, the other attributes being independent.
	X -> Y, X -> Z, but neither Y -> Z nor Z -> Y.
Trivial
	The dependent is a subset of the determinant.
	(X,Y) -> X
Non-trivial
	X -> Y, and Y is not a subset of X.
Transitive
	X -> Y, Y -> Z, ergo X -> Z

4)ERD
https://www.smartdraw.com/entity-relationship-diagram/
Entity Relationship Diagram is a way of visualizing the structure and relationships of a database using graphical symbols. There are five main components of ERD.
- Entities (rectangles) 
- Actions/relationships (diamonds) denote the type of relationship between entities.
- Attributes (ovals) 
- Connecting lines signify a relationship between entities. 
- Cardinality - specifies how many instances of an entity relate to one instance of another entity. Cardinality specifies the maximum occurrences in a relationship, ordinality specifies the minimum, i.e. whether the relationship is optional (0) or mandatory (1). 

5)ACID Properties and Various Isolation Levels
Atomicity, Consistency, Isolation, Durability is a set of properties of database transactions intended to guarantee data validity despite errors, power failures, and other mishaps. In the context of databases, a sequence of database operations that satisfies the ACID properties (which can be perceived as a single logical operation on the data) is called a transaction. 
The main operations of a transaction are Read, Write, Commit, and Rollback.

Atomicity
Transactions are often composed of multiple statements. Atomicity guarantees that each transaction is treated as a single "unit", which either succeeds completely, or fails completely: if any of the statements constituting a transaction fails to complete, the entire transaction fails and the database is left unchanged. An atomic system must guarantee atomicity in each and every situation, including power failures, errors and crashes.[4] A guarantee of atomicity prevents updates to the database occurring only partially, which can cause greater problems than rejecting the whole series outright. As a consequence, the transaction cannot be observed to be in progress by another database client. At one moment in time, it has not yet happened, and at the next it has already occurred in whole (or nothing happened if the transaction was cancelled in progress). 

Consistency
Consistency ensures that a transaction can only bring the database from one valid state to another, maintaining database invariants: any data written to the database must be valid according to all defined rules, including constraints, cascades, triggers, and any combination thereof. This prevents database corruption by an illegal transaction, but does not guarantee that a transaction is correct. 

Isolation
Transactions are often executed concurrently (e.g., multiple transactions reading and writing to a table at the same time). Isolation ensures that concurrent execution of transactions leaves the database in the same state that would have been obtained if the transactions were executed sequentially. Isolation is the main goal of concurrency control; depending on the method used, the effects of an incomplete transaction might not even be visible to other transactions. 

https://www.geeksforgeeks.org/transaction-isolation-levels-dbms/
-Dirty Read happens when a transaction reads data that hasn't been committed.
-Non Repeatable Read happens when a transaction reads the same row twice and gets a different value each time.
-Phantom Read happens when two identical queries execute but retrieve different rowsets. E.g. T1 executes a query that retrieves one rowset. T2 inserts, deletes or updates rows that T1 retrieved. If T1 executes again it will retrieve a different rowset. 

Isolation levels:
-Read Uncommitted. The lowest Isolation level. One transaction may read not-yet-committed changes made by another transaction thereby allowing dirty reads. Transactions are not isolated from each other at this level.
-Read Committed. The level guarantees that any data read is committed at the moment it's read. It does not allow dirty reads. The transaction holds a read or write lock on the current row preventing other transactions from reading, writing or updating.
-Repeatable Read. The most restrictive level. The transaction holds a read lock on all rows it references and a write lock on all rows it inserts, updates, or deletes. Other transactions are can't access the rows so non-repeatable reads are prevented.
-Serializable. The highest isolation level. Concurrently executing transactions appear to be serially executing. Dirty reads, non-repeatable reads and phantom reads do not occur. 

Durability
Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash). This usually means that completed transactions (or their effects) are recorded in non-volatile memory.
---
Ingres began as a research project at the University of California, Berkeley, starting in the early 1970s and ending in 1985.
PostgreSQL also known as Postgres, is a free and open-source relational database management system (RDBMS) emphasizing extensibility and SQL compliance. It was originally named POSTGRES, referring to its origins as a successor to the Ingres database developed at the University of California, Berkeley.[13][14] In 1996, the project was renamed to PostgreSQL to reflect its support for SQL. After a review in 2007, the development team decided to keep the name PostgreSQL and the alias Postgres.
---
https://www.postgresql.org/docs/8.1/datatype.html#DATATYPE-SERIAL
The data types serial and bigserial are not true types, but merely a notational convenience for setting up unique identifier columns (similar to the AUTO_INCREMENT property supported by some other databases). In the current implementation, specifying

CREATE TABLE tablename (
    colname SERIAL
);

is equivalent to specifying:

CREATE SEQUENCE tablename_colname_seq;
CREATE TABLE tablename (
    colname integer DEFAULT nextval('tablename_colname_seq') NOT NULL
);

Thus, we have created an integer column and arranged for its default values to be assigned from a sequence generator. A NOT NULL constraint is applied to ensure that a null value cannot be explicitly inserted, either. In most cases you would also want to attach a UNIQUE or PRIMARY KEY constraint to prevent duplicate values from being inserted by accident, but this is not automatic.

---

https://www.postgresql.org/message-id/4542903D.5080207%40best.com
Re: CREATE TABLE initial value for PRIMARY KEY

CREATE SEQUENCE id_seq;
SELECT setval('id_seq',100111);
CREATE TABLE customer( id INTEGER DEFAULT nextval('id_seq'), name VARCHAR(30) );

Note also that alternatively it can be done as follows:
CREATE TABLE customer ( id SERIAL, name VARCHAR(30) );
SELECT setval('customer_id_seq',100111);

---
SELECT continent, name, population FROM world x
  WHERE population >= ALL
    (SELECT population FROM world y
        WHERE y.continent=x.continent
          AND population>0)


A correlated subquery works like a nested loop: the subquery only has access to rows related to a single record at a time in the outer query. The technique relies on table aliases to identify two different uses of the same table, one in the outer query and the other in the subquery.

One way to interpret the line in the WHERE clause that references the two table is “… where the correlated values are the same”.

In the example provided, you would say “select the country details from world where the population is greater than or equal to the population of all countries where the continent is the same”.
---
constraints: 
- primary key, 
- foreign key (referential integrity)
- unique key, 
- composite key, 
- not null, 
- check, 
- default
DDL: create, alter, truncate, drop
DML: CRUD
TCL (Transaction Control Language): commit, rollback, savepoint
DQL: select
DCL (data control): grant revoke

SELECT col1, col2, ... colN FROM table
WHERE condition or expression
GROUPBY category
HAVING apply_filter on group by results
ORDER BY col1 ASC(default) DESC;

---
Problem: trouble logging into DBeaver
Program Files x86/PostgreSQL/10/data/pg_hba.conf
change METHOD column of rows host/all to trust
---
DBeaver Postgres superuser password
P16ostgre!
port 5432
---
AWS RDS 
Create db options:
free tier
uncheck Enable storage autoscaling
Public access: yes
click db name > click link under Security group rules (e.g. default (sg-c88ccebc)) > Security group ID > Inbound rules tab > Edit inbound rules > Under Source, choose My IP > Save rules
*
DB identifier: postgres1
master username/password postgres/fuckP16ostgres!
endpoint: 
postgres1.csy4ivg8fkby.us-east-2.rds.amazonaws.com
port 5432
*
DB identifier: postgres2
master username/password postgres2/fuckP16ostgres2!
endpoint: postgres2.csy4ivg8fkby.us-east-2.rds.amazonaws.com
port 5432

---
PostgreSQL settings
Installation Directory: C:\Program Files\PostgreSQL\10
Server Installation Directory: C:\Program Files\PostgreSQL\10
Data Directory: C:\Program Files\PostgreSQL\10\data
Database Port: 5432
Database Superuser: postgres
Operating System Account: NT AUTHORITY\NetworkService
Database Service: postgresql-x64-10
Command Line Tools Installation Directory: C:\Program Files\PostgreSQL\10
pgAdmin4 Installation Directory: C:\Program Files\PostgreSQL\10\pgAdmin 4
psql \Program Files\PostgreSQL\10\scripts\runsql.bat
