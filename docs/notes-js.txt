Javascript
==========
this keyword won't work inside lambdas.
---
Best Practice: Access form elements by HTML id or name attribute?
https://stackoverflow.com/questions/2435525/best-practice-access-form-elements-by-html-id-or-name-attribute

Give your form an id only, and your input a name only:

<form id="myform">
  <input type="text" name="foo">

Then the most standards-compliant and least problematic way to access your input element is via:

document.getElementById("myform").elements["foo"]

using .elements["foo"] instead of just .foo is preferable because the latter might return a property of the form named "foo" rather than a HTML element!

==========

OOP in JS
---
no overloaded constructor, 
no multiple inheritance,
no abstract classes?
======
([this.prop1, this.prop2] = val);
// val must be iterable
// if val = 'foo' outputs
// this.prop1 = 'f', this.prop2 = 'o'
https://medium.com/@viktor.kukurba/object-oriented-programming-in-javascript-1-abstraction-c47307c469d1
======
The 6th edition, ECMAScript 6 (ES6) and later renamed to ECMAScript 2015, was finalised in June 2015.[11][31] This update adds significant new syntax for writing complex applications, including class declarations (class Foo { ... }), ES6 modules like import * as moduleName from "..."; export const Foo, but defines them semantically in the same terms as ECMAScript 5 strict mode. Other new features include iterators and for...of loops, Python-style generators, arrow function expression (() => {...}), let keyword for local declarations, const keyword for constant local declarations, binary data, typed arrays, new collections (maps, sets and WeakMap), promises, number and math enhancements, reflection, proxies (metaprogramming for virtual objects and wrappers) and template literals for strings.[32][33] The complete list is extensive.[34][35] As the first "ECMAScript Harmony" specification, it is also known as "ES6 Harmony." 
https://en.wikipedia.org/wiki/ECMAScript#ES2015
======
dom is the data representation of the objects that comprise the structure and content of a document on the web. the dom is a programming interface for html and xml documents. it models the document as nodes and objects. it's an object-oriented representation of the web page. 
---
IIFE: Immediately invoked function expression
(function(){
	// function body
})()
=========
Abstract Equality Comparison Algorithm 
https://medium.com/javascript-in-plain-english/how-does-abstract-equality-comparison-work-591eed983666
References ECMA specification 7.2.15
https://www.ecma-international.org/wp-content/uploads/ECMA-262.pdf
=========
javascript data types:
data types that are primitives
	undefined, boolean, number, string, bigint, symbol
strucural types
	object. Object, Array, Map, Set, WeakMap, WeakSet, Date and almost anything made with new keyword.
	function
structural root
	null
---
As we can see the meaning of every primitive type is obvious except of undefined and null which are almost the same. This happens as the concept of Time is strictly connected with the purpose of algorithms. We can purport something that does not yet exist or does not exist anymore: undefined. But when we wish to be able to represent something that exists being empty, we have to invent another keyword. And that is what null stands for: the beginning of structural meaning.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
---
ECMA-262 is a standard published by ecma international and is a specification for a gerneal purpose scripting language. 
javascript is a general purpose scripting language that conforms to the ecmascript specification. 
https://www.freecodecamp.org/news/whats-the-difference-between-javascript-and-ecmascript-cba48c73a2b5/
---
css box model is a way of graphically rendering each visible element in an html document. The box model consists of 4 parts: content, padding, border, and margin. 
---
bootstrap is a css framework for creating responsive and mobile-first websites.
---
Four core html attributes
id, class, style, title
title is most useful with a, link, area, and img elements.
========
js  frameworks: angular, vue, react, redux, express , jquery, backbone,
server side js: node.js, 
---
false, 0, -0, 0n, '', "", ``, null, undefined, NaN

Equivalences:
- false, zero and empty strings are all equivalent.
- null and undefined are equivalent to themselves and each other but nothing else.
- NaN is not equivalent to anything – including another NaN!
- Infinity is truthy – but cannot be compared to true or false!
- An empty array is truthy – yet comparing with true is false and comparing with false is true?!

Any value can be converted to a real Boolean value using a double-negative !! to be absolutely certain a false is generated only by false, 0, "", null, undefined and NaN:
---
var global to application or function
let local to function or js file
const local to function or js file

promise object has 3 states. 
pending - before the promise succeeds or fails.
resolved - promise has been kept i.e. it has completed the action.
rejected - unable to keep promise, or failed to keep it.
------
callback v. promise

action1(function(){
	action2(function(){
		action3(function(){
...
		}
	}
}

action1()
	.then(action2)
	.then(action3)
...

---
hoisting is declaring a variable after it's been used
---
class
encapsulation
inheritance
polymorphism
abstraction
---

